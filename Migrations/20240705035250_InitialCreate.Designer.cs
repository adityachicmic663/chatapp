// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backendChatApplication;

#nullable disable

namespace backendChatApplcation.Migrations
{
    [DbContext(typeof(chatDataContext))]
    [Migration("20240705035250_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backendChatApplcation.Models.ConnectedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConnectedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("backendChatApplcation.Models.chatMessageModel", b =>
                {
                    b.Property<int>("chatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("chatMessageId"));

                    b.Property<int?>("chatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("filePath")
                        .HasColumnType("longtext");

                    b.Property<string>("filetype")
                        .HasColumnType("longtext");

                    b.Property<string>("message")
                        .HasColumnType("longtext");

                    b.Property<int?>("receiverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("sendAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("senderId")
                        .HasColumnType("int");

                    b.HasKey("chatMessageId");

                    b.HasIndex("chatRoomId");

                    b.HasIndex("senderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("backendChatApplcation.Models.chatRoomModel", b =>
                {
                    b.Property<int>("chatRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("chatRoomId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("chatRoomName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("chatRoomId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("backendChatApplcation.Models.userChatRoomModel", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("chatRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("joinedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("userId", "chatRoomId");

                    b.HasIndex("chatRoomId");

                    b.ToTable("UserChatRooms");
                });

            modelBuilder.Entity("backendChatApplication.Models.UserModel", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("FirstLanguage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OtpTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("emailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("isOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("otpToken")
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("phoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("profilePicturePath")
                        .HasColumnType("longtext");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("backendChatApplcation.Models.ConnectedUser", b =>
                {
                    b.HasOne("backendChatApplication.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backendChatApplcation.Models.chatMessageModel", b =>
                {
                    b.HasOne("backendChatApplcation.Models.chatRoomModel", "chatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("chatRoomId");

                    b.HasOne("backendChatApplication.Models.UserModel", "sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("senderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatRoom");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("backendChatApplcation.Models.userChatRoomModel", b =>
                {
                    b.HasOne("backendChatApplcation.Models.chatRoomModel", "ChatRoom")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("chatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendChatApplication.Models.UserModel", "User")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backendChatApplcation.Models.chatRoomModel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("backendChatApplication.Models.UserModel", b =>
                {
                    b.Navigation("SentMessages");

                    b.Navigation("UserChatRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
